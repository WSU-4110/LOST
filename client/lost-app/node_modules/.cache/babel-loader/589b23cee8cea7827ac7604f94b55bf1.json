{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kcgal\\\\OneDrive\\\\Documents\\\\GitHub\\\\LOST\\\\client\\\\lost-app\\\\src\\\\Dashboard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport useAuth from './hooks/useAuth';\nimport Player from './Player';\nimport TrackSearchResult from './TrackSearchResult';\nimport SpotifyWebApi from 'spotify-web-api-node';\nimport axios from 'axios';\nimport { DashBoardContainer, SearchInput, ResultsContainer, LyricsContainer, PlayerContainer } from './styles/Dashboard.styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spotifyApi = new SpotifyWebApi({\n  clientId: process.env.REACT_APP_CLIENT_ID\n});\n\nconst Dashboard = _ref => {\n  _s();\n\n  let {\n    code\n  } = _ref;\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [playingTrack, setPlayingTrack] = useState();\n  const [lyrics, setLyrics] = useState('');\n\n  function chooseTrack(track) {\n    setPlayingTrack(track);\n    setSearch('');\n    setLyrics('');\n  }\n\n  useEffect(() => {\n    if (!playingTrack) return;\n\n    (async () => {\n      const {\n        data: {\n          lyrics\n        }\n      } = await axios.get(`${process.env.REACT_APP_BASE_URL}/lyrics`, {\n        params: {\n          track: playingTrack.title,\n          artist: playingTrack.artist\n        }\n      });\n      setLyrics(lyrics);\n    })();\n  }, [playingTrack]);\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]);\n  useEffect(() => {\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return;\n    let cancel = false;\n\n    (async () => {\n      const {\n        body\n      } = await spotifyApi.searchTracks(search);\n      if (cancel) return;\n      setSearchResults(body.tracks.items.map(track => {\n        const smallestAlbumImage = track.album.images.reduce((smallest, image) => {\n          if (image.height < smallest.height) return image;\n          return smallest;\n        }, track.album.images[0]);\n        return {\n          artist: track.artists[0].name,\n          title: track.name,\n          uri: track.uri,\n          albumUrl: smallestAlbumImage.url\n        };\n      }));\n    })();\n\n    return () => cancel = true;\n  }, [search, accessToken]);\n  return /*#__PURE__*/_jsxDEV(DashBoardContainer, {\n    children: [/*#__PURE__*/_jsxDEV(SearchInput, {\n      type: \"search\",\n      placeholder: \"Search Songs/Artists\",\n      value: search,\n      onChange: e => setSearch(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResultsContainer, {\n      children: [searchResults.map(track => /*#__PURE__*/_jsxDEV(TrackSearchResult, {\n        track: track,\n        chooseTrack: chooseTrack\n      }, track.uri, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this)), searchResults.length === 0 && /*#__PURE__*/_jsxDEV(LyricsContainer, {\n        children: lyrics\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PlayerContainer, {\n      children: /*#__PURE__*/_jsxDEV(Player, {\n        accessToken: accessToken,\n        trackUri: playingTrack === null || playingTrack === void 0 ? void 0 : playingTrack.uri\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Dashboard, \"mvwrkyCORFoEiiJp8gBg3aA7BKk=\", false, function () {\n  return [useAuth];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["C:/Users/kcgal/OneDrive/Documents/GitHub/LOST/client/lost-app/src/Dashboard.js"],"names":["React","useState","useEffect","useAuth","Player","TrackSearchResult","SpotifyWebApi","axios","DashBoardContainer","SearchInput","ResultsContainer","LyricsContainer","PlayerContainer","spotifyApi","clientId","process","env","REACT_APP_CLIENT_ID","Dashboard","code","accessToken","search","setSearch","searchResults","setSearchResults","playingTrack","setPlayingTrack","lyrics","setLyrics","chooseTrack","track","data","get","REACT_APP_BASE_URL","params","title","artist","setAccessToken","cancel","body","searchTracks","tracks","items","map","smallestAlbumImage","album","images","reduce","smallest","image","height","artists","name","uri","albumUrl","url","e","target","value","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nimport useAuth from './hooks/useAuth';\r\nimport Player from './Player';\r\nimport TrackSearchResult from './TrackSearchResult';\r\nimport SpotifyWebApi from 'spotify-web-api-node';\r\nimport axios from 'axios';\r\nimport {\r\n  DashBoardContainer,\r\n  SearchInput,\r\n  ResultsContainer,\r\n  LyricsContainer,\r\n  PlayerContainer,\r\n} from './styles/Dashboard.styles';\r\n\r\nconst spotifyApi = new SpotifyWebApi({\r\n  clientId: process.env.REACT_APP_CLIENT_ID,\r\n});\r\n\r\nconst Dashboard = ({ code }) => {\r\n  const accessToken = useAuth(code);\r\n  const [search, setSearch] = useState('');\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const [playingTrack, setPlayingTrack] = useState();\r\n  const [lyrics, setLyrics] = useState('');\r\n\r\n  function chooseTrack(track) {\r\n    setPlayingTrack(track);\r\n    setSearch('');\r\n    setLyrics('');\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!playingTrack) return;\r\n\r\n    (async () => {\r\n      const {\r\n        data: { lyrics },\r\n      } = await axios.get(`${process.env.REACT_APP_BASE_URL}/lyrics`, {\r\n        params: {\r\n          track: playingTrack.title,\r\n          artist: playingTrack.artist,\r\n        },\r\n      });\r\n      setLyrics(lyrics);\r\n    })();\r\n  }, [playingTrack]);\r\n\r\n  useEffect(() => {\r\n    if (!accessToken) return;\r\n    spotifyApi.setAccessToken(accessToken);\r\n  }, [accessToken]);\r\n\r\n  useEffect(() => {\r\n    if (!search) return setSearchResults([]);\r\n    if (!accessToken) return;\r\n\r\n    let cancel = false;\r\n    (async () => {\r\n      const { body } = await spotifyApi.searchTracks(search);\r\n      if (cancel) return;\r\n      setSearchResults(\r\n        body.tracks.items.map((track) => {\r\n          const smallestAlbumImage = track.album.images.reduce(\r\n            (smallest, image) => {\r\n              if (image.height < smallest.height) return image;\r\n              return smallest;\r\n            },\r\n            track.album.images[0]\r\n          );\r\n\r\n          return {\r\n            artist: track.artists[0].name,\r\n            title: track.name,\r\n            uri: track.uri,\r\n            albumUrl: smallestAlbumImage.url,\r\n          };\r\n        })\r\n      );\r\n    })();\r\n\r\n    return () => (cancel = true);\r\n  }, [search, accessToken]);\r\n\r\n  return (\r\n    <DashBoardContainer>\r\n      <SearchInput\r\n        type=\"search\"\r\n        placeholder=\"Search Songs/Artists\"\r\n        value={search}\r\n        onChange={(e) => setSearch(e.target.value)}\r\n      />\r\n      <ResultsContainer>\r\n        {searchResults.map((track) => (\r\n          <TrackSearchResult\r\n            track={track}\r\n            key={track.uri}\r\n            chooseTrack={chooseTrack}\r\n          />\r\n        ))}\r\n        {searchResults.length === 0 && (\r\n          <LyricsContainer>{lyrics}</LyricsContainer>\r\n        )}\r\n      </ResultsContainer>\r\n      <PlayerContainer>\r\n        <Player accessToken={accessToken} trackUri={playingTrack?.uri} />\r\n      </PlayerContainer>\r\n    </DashBoardContainer>\r\n  );\r\n};\r\n\r\nexport default Dashboard;"]},"metadata":{},"sourceType":"module"}